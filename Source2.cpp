#include <iostream>
#include <vector>
#include <algorithm>
#include "utils.h"


/*Задание 1. Очередь из роботов
Повторите программу из теоретического материала.
Напишите электронную очередь для андроидов. Их количество неизвестно заранее.
Каждый андроид вводит с клавиатуры свой идентификационный номер - целое число.
Нужно сохранить их номера в векторе в том порядке, в котором они записывались в очередь.*/

void task3_1() {
  int robots_number = 0;
  std::cout << "Enter -1 for exit\n";
  std::cout << "\n";
  std::vector<int> robots = { 1, 2 };

  while (robots_number != -1) {
    std::cout << "Enter your number: ";
    std::cin >> robots_number;
    my_push_back(robots, robots_number);
  }
  print_vector(robots);
};

/*Задание 2. Лечебница
Напишите программу для картотеки пациентов лечебницы.
С клавиатуры вводится неизвестное количество целых положительных чисел - возрастов пациентов.
Когда пациенты заканчиваются, медсестра вводит число -1.
Это говорит программе о том, что пора заканчивать с приемом пациентов
и переходить к расчету статистики.

Напишите программу, складывающую в вектор целые положительные числа,
пока не поступит отрицательное число.
После этого выведите среднее значение всех введенных чисел и их количество.
*/

void task3_2() {
  int age = 0;
  std::cout << "\n" << "Enter -1 for exit\n" << "\n";
  std::vector<int> patients_vec;

  while (age != -1) {
    std::cout << "Enter your number: ";
    std::cin >> age;
    my_push_back(patients_vec, age);
  }
  print_vector(patients_vec);

  float sum_age = 0;
  for (int i = 0; i < patients_vec.size() - 1; ++i)
    sum_age += patients_vec[i];

  std::cout << "\n" << sum_age / (patients_vec.size() - 1) << "\n";
};

/*Задание 3. Роботы и коррупция*
Улучшите электронную очередь для роботов. К нам приходят роботы разного социального статуса.
Каждый робот вводит не только свой уникальный номер, но и свое место в очереди.
Например, пусть в нашей очереди 10 роботов и к нам приходит 11-й.
Сначала он вводит свой номер, как и раньше, а затем свое место в очереди - например, 5.
В этом случае он должен оказаться в очереди пятым, а все остальные,
начиная со старого пятого - подвинуться дальше в конец очереди.
Реализуйте функцию std::vector<int> add_to_position(std::vector vec, int val, int position)
*/

void task3_3() {

};